#!/usr/bin/python
# -*- coding: latin-1 -*-

from PyQt5 import QtCore, QtGui, QtWidgets

import pickle
import codecs
import os.path
import configparser

from GUI.FilterButton import FilterButton, MultiColorFilterButton
from GUI.CardImageWidget import CardImageWidget
from GUI.QuickStatsCanvas import QuickStatsCanvas
from GUI.CardList import CardList
from GUI.MainWindowMenuBar import MainWindowMenuBar
from GUI.MainWindowToolBar import MainWindowToolBar
from Base.FileHandler import FileHandler
from Base.Cube import Cube
from CubeEditor.CubeEditor import Ui_CubeEditor


class Ui_MainWindow(QtWidgets.QMainWindow):
    """
    The mainwindow of the program. The user interface code is generated by
    the  QT's UI designer.
    """

    def __init__(self, parent=None):
        print(2)
        super(Ui_MainWindow, self).__init__(parent=parent)
        print(2)
        #self.setFrameStyle(QtGui.QFrame.Sunken | QtGui.QFrame.StyledPanel)

        #------------------------------------
        self._cardReader = FileHandler(self.getDatabase())
        self._config = configparser.ConfigParser()

        #------------------------------------
        self._config.read('Settings\Settings.ini')
        self.setupUi(self)
        print(3)
        self.configure(currentDeckSaved='', currentDeckPath='')
        self._presetBasicLands()

        #------------------------------------
        self._config.read('Settings\Settings.ini')
        
#==========================================================================#
#                              Settings handling methods                   #
#==========================================================================#
#-------------------------------------------------------------------------------
    def configure(self, **kwargs):
        """Configures the settings file."""

        for keyword in kwargs.keys():
            self._config.set('Config', keyword, kwargs[keyword])

        with open('Settings\Settings.ini', 'w') as settingsFile:
            self._config.write(settingsFile)

#-------------------------------------------------------------------------------
    def getSetting(self, option):
        """
        Returns an option from the settings file under the [Config] section.
        """
        
        self._config.read('Settings\Settings.ini')
        return self._config.get('Config', option)

#-------------------------------------------------------------------------------
    def getMwsSetCodes(self):
        """
        Returns The MWS set codes from the Settings.ini file.
        """
        
        self._config.read('Settings\Settings.ini')
        items = self._config.items('mwssetcodes')
        mwsSetCodes = {}
        
        for item in items:
            mwsSetCodes[item[0]] = item[1]
            
        return mwsSetCodes

#==========================================================================#
#                              Database handling methods                   #
#==========================================================================#
#-------------------------------------------------------------------------------
    def getDatabase(self):
        """
        Unpickles and returns the Database instance.
        """
        
        return pickle.load(open('Database\MasterBase.pick', 'rb'))

#-------------------------------------------------------------------------------
    def saveDatabase(self, db):
        """
        Pickles the database back to a file located in the Database package.
        """
        
        pickle.dump(db, open('Database\MasterBase.pick', 'wb'))
        self._presetBasicLands()
        

#==========================================================================#
#                              Public Editing Methods                      #
#==========================================================================#

#-------------------------------------------------------------------------------
    def saveDeckAs(self):
        """
        Save the deck/sideboard as an mwsdeck file and choose new settings.
        """
        
        self.configure(currentDeckPath='', currentDeckSaved=False)
        self.saveDeck()

#-------------------------------------------------------------------------------
    def saveDeck(self):
        """
        Save the deck/sideboard as an mwsdeck file with the same settings as 
        before.
        """
        
        if self.currentDeckEmpty():
            return

        #-----------------------------
        #Sideaboard and deck cards
        sbCards = self.sideBoardList._cards.values()
        deckCards = self.deckList._cards.values()

        if self.getSetting('currentDeckPath'):
            path = self.getSetting('currentDeckPath')
        else:
            path = self._saveMWSDeckFileDialog()
        if path:
            deckFile = codecs.open(path, 'w')
            self._cardReader.writeMwsDeck(deckFile, deckCards, sbCards)

            self.configure(currentDeckSaved='1', currentDeckPath=path,
                           lastSaveDeckLoc=os.path.dirname(str(path)))


#-------------------------------------------------------------------------------
    def openMWSDeck(self):
        """
        Opens a deck from an mwsdeck file.
        """
        
        if self.currentDeckUnsaved():
            reply = self._saveDeckClosingWarning()

            if reply == QtWidgets.QMessageBox.Yes:
                self.saveDeckAs()
            elif reply == QtWidgets.QMessageBox.Cancel:
                return
            
        path = self._openMWSDeckDialog()

        if path:
            deckFile = codecs.open(path, 'r')
            deckCards, sbCards, lands, rejected = \
                self._cardReader.readMWSDeck(deckFile)

            if deckCards or sbCards:
                self.cardsToLists(sbCards, deckCards)
                self.forestSpinBox.setValue(lands['Forest'])
                self.mountainSpinBox.setValue(lands['Mountain'])
                self.swampSpinBox.setValue(lands['Swamp'])
                self.islandSpinBox.setValue(lands['Island'])
                self.plainsSpinBox.setValue(lands['Plains'])
                
                self.configure(lastOpenDeckLoc=os.path.dirname(str(path)),
                               currentDeckPath=path,
                               currentDeckSaved='1')
                
            else:
                self._MWSfileOpenErrorDialog()

                
#==========================================================================#
#                              Sealed deck creation                        #
#==========================================================================#

#-------------------------------------------------------------------------------
    def cubeSealedFromMWSDeckFile(self):
        """
        Creates a sealed deck from a cube in an MWSDeck file. Cards are ignored
        if they are on the sideboard.
        """
        
        if self.currentDeckUnsaved():
            reply = self._saveDeckClosingWarning()

            if reply == QtWidgets.QMessageBox.Yes:
                self.saveDeckAs()
            elif reply == QtWidgets.QMessageBox.Cancel:
                return

        path = self._openMWSDeckDialog()

        if path:
            deckFile = codecs.open(path, 'r')
            cards = self._cardReader.readMWSDeck(deckFile)
            self.configure(lastOpenDeckLoc=os.path.dirname(str(path)))

            if cards:
                cube = Cube(cards)
                sealedPool = cube.getSealed()
                self.cardsToLists(sealedPool, [])

            else:
                self._MWSfileOpenErrorDialog()

#-------------------------------------------------------------------------------
    def cubeSealedFromCubeFile(self):
        """
        Creates a sealed deck from a cube in an MWSDeck file
        """
        
        if self.currentDeckUnsaved():
            reply = self._saveDeckClosingWarning()

            if reply == QtWidgets.QMessageBox.Yes:
                self.saveDeckAs()
            elif reply == QtWidgets.QMessageBox.Cancel:
                return

        path = self._openCubeFileDialog()

        if path:
            try:
                cube = pickle.load(open(path, 'r'))
            except (IOError, KeyError, EOFError):
                self._cubeFileOpenErrorDialog()
            else:
                sealedPool = cube.getSealed()
                self.cardsToLists(sealedPool, [])
                self.configure(lastOpenCubeLoc=os.path.dirname(str(path)))

#-------------------------------------------------------------------------------
    def cubeSealedFromTextFile(self):
        """
        Creates a sealed deck from a cube in an MWSDeck file
        """
        
        if self.currentDeckUnsaved():
            reply = self._saveDeckClosingWarning()

            if reply == QtWidgets.QMessageBox.Yes:
                self.saveDeckAs()
            elif reply == QtWidgets.QMessageBox.Cancel:
                return

        path = self._openTxtFileDialog()

        if path:
            try:
                textFile = codecs.open(path, mode='r', encoding='latin-1')
                cards = self._cardReader.readTextFile(textFile)
            except IOError:
                self._txtFileOpenErrorDialog()
            else:
                if cards[1]:
                    self._errorsInTxtFileDialog(cards)

                if cards[0]:
                    cube = Cube(cards[0])

                    reply = self._saveCubeQuestionDialog()

                    if reply == QtWidgets.QMessageBox.Ok:
                        self.saveCube(cube)

                    sealedPool = cube.getSealed()
                    self.cardsToLists(sealedPool, [])
                    self.configure(lastOpenTxtFileLoc=os.path.dirname(str(path)))
                else:
                    self._txtFileOpenErrorDialog()
                    
#==========================================================================#
#                              Other Public  methods                       #
#==========================================================================#

#-------------------------------------------------------------------------------
    def basicLandCount(self):
        """
        Returns the number of basic lands in the deck. Counts the numbers in
        """

        return self.forestSpinBox.value() + self.mountainSpinBox.value() + \
               self.swampSpinBox.value() + self.plainsSpinBox.value() + \
               self.islandSpinBox.value()

#-------------------------------------------------------------------------------
    def currentDeckEmpty(self):
        """
        Checks if the deck/sideboard is empty and displays a warning if it is
        and returns True.
        """
        
        return not (self.sideBoardList.cardCount() + self.deckList.cardCount())

#-------------------------------------------------------------------------------
    def currentDeckUnsaved(self):
        """
        Checks if the deck/sideboard is saved.
        """
        
        if self.currentDeckEmpty():
            return False
        else:
            return not self.getSetting('currentDeckSaved')
        
#-------------------------------------------------------------------------------
    def transferCardItem(self, cardItem, sender):
        """
        Transfers a CardItem from a list to another.
        """

        if cardItem.__class__.__name__ is not 'TreeCardItem' or \
           'Basic Land' in cardItem.type:
            return

        cardItem.remove()

        if sender == self.deckList:
            self.sideBoardList.addCard(cardItem)
            self.statsWidget.removeCardData(cardItem)
        else:
            self.deckList.addCard(cardItem)
            self.statsWidget.addCardData(cardItem)

        if self.getSetting('autoUpdateStatsWidget'):
            self.statsWidget.Update()
            
        self.refreshNumbers()
        
#-------------------------------------------------------------------------------
    def switchCardItem(self, newCard, oldCard, sender):
        """
        Transfers a CardItem from a list to another.
        """
        
        for _ in range(oldCard._qty):
            oldCard.remove()
            sender.addCard(newCard)

            if sender == self.deckList:
                self.statsWidget.removeCardData(oldCard)
                self.statsWidget.addCardData(newCard)

#-------------------------------------------------------------------------------
    def transferCardItems(self, cardItems, sender):
        """
        Transfers multiple CardItems from a list to another.
        """

        if sender == self.deckList:
            self.sideBoardList.addCards(cardItems)

            for cardItem in cardItems:
                if cardItem.__class__.__name__ is not 'TreeCardItem' or \
                   'Basic Land' in cardItem.type:
                    continue

                cardItem.remove()
                self.statsWidget.removeCardData(cardItem)
        else:
            self.deckList.addCards(cardItems)

            for cardItem in cardItems:
                if cardItem.__class__.__name__ is not 'TreeCardItem' or \
                   'Basic Land' in cardItem.type:
                    continue

                cardItem.remove()
                self.statsWidget.addCardData(cardItem)

        if self.getSetting('autoUpdateStatsWidget'):
            self.statsWidget.Update()
            
        self.refreshNumbers()
        
#-------------------------------------------------------------------------------
    def cardsToLists(self, sideBoardCards, deckCards):
        """
        Transfers given cards to the lists.
        """

        self.clearAll()

        for card in deckCards:
            self.deckList.addCard(card)
            self.statsWidget.addCardData(card)

        self.sideBoardList.addCards(sideBoardCards)

        self.refreshNumbers()
        
        if self.getSetting('autoUpdateStatsWidget'):
            self.statsWidget.Update()



#-------------------------------------------------------------------------------
    def refreshNumbers(self):
        """
        Sets the correct values for the numbers of cards seen on the titles
        of deck and sideboard lists, and also the basic lands spinbox title.
        """

        sbCards = self.sideBoardList.cardCount()
        self.sideBoardBox.setTitle('Sideboard({num})'.format(num=sbCards))
        deckCards = self.deckList.cardCount()
        self.deckBox.setTitle('Deck({num})'.format(num=deckCards))
        basicLands = self.basicLandCount()
        self.basicLandsBox.setTitle('Basic lands({num})'.format(num=basicLands))
        self.configure(currentDeckSaved='')

#-------------------------------------------------------------------------------
    def clearAll(self):
        """
        Clears all the cards from each list, and clears the data from
        statsWidget.
        """

        self.deckList.clearList(delete=True)
        self.sideBoardList.clearList(delete=True)
        self.sideBoardList.refreshLayout()
        self.deckList.refreshLayout()
        self.statsWidget.clear()
        self.refreshNumbers()
        self.configure(currentDeckPath='')
        self.statsWidget.Update()

#-------------------------------------------------------------------------------
    def openCubeEditor(self):
        """
        Opends the cube editor window.
        """

        cubeEditor = Ui_CubeEditor()
        cubeEditor.show()

        db = self.getDatabase()
        cards = db.getAllCards()
        cubeEditor.masterBaseList.addCards(cards, progressDialog=None)
        
#-------------------------------------------------------------------------------
    def SwitchFocusedCardList(self):
        """
        Switches the focus of the current CardList to the other.
        """
        
        if self.focusWidget() == self.sideBoardList:
            self.deckList.setFocus()
        else:
            self.sideBoardList.setFocus()

#==========================================================================#
#                              Private                                     #
#==========================================================================#
        
        

#-------------------------------------------------------------------------------
    def _presetBasicLands(self):
        """
        Searches the settings defined basic lands from the database beforehand
        for faster use.
        """

        db = self.getDatabase()

        self._forest = db.getCard(self.getSetting('Forest'))
        self._swamp = db.getCard(self.getSetting('Swamp'))
        self._plains = db.getCard(self.getSetting('Plains'))
        self._mountain = db.getCard(self.getSetting('Mountain'))
        self._island = db.getCard(self.getSetting('Island'))

#-------------------------------------------------------------------------------
    def _setBacground(self, imagePath):
        """
        """
        #self.setStyleSheet('background-color: rgba(100%, 100%, 100%, 50%);')
        backg = QtGui.QPixmap(imagePath)
        transBackg = QtGui.QPixmap(backg.size())
        painter = QtGui.QPainter(transBackg)
        painter.setCompositionMode(QtGui.QPainter.CompositionMode_Source)
        painter.drawPixmap(0, 0, backg)
        painter.setCompositionMode(QtGui.QPainter.CompositionMode_DestinationIn)
        painter.fillRect(transBackg.rect(), QtGui.QColor(0,0,0,100))
        painter.end()
        self.setBackgroundRole(QtGui.QPalette.Base)

        palette = QtGui.QPalette()
        palette.setBrush(QtGui.QPalette.Background, QtGui.QBrush(transBackg))
        self.centralWidget().setPalette(palette)
        #elf.centralWidget().setAttribute(QtCore.Qt.WA_TranslucentBackground, True)
        #self.setWindowFlags(QtCore.Qt.FramelessWindowHint)

#-------------------------------------------------------------------------------
    def _set(self):
        """
        """
#==========================================================================#
#                              Event handling                              #
#==========================================================================#

#-------------------------------------------------------------------------------
    def closeEvent(self, event):
        """
        Close event handler.
        """

        if self.currentDeckUnsaved():
            reply = self._saveDeckClosingWarning()

            if reply == QtWidgets.QMessageBox.Yes:
                self.saveDeckAs()
                event.accept()
            elif reply == QtWidgets.QMessageBox.Cancel:
                event.ignore()
            else:
                event.accept()
        else:
            event.accept()
            
#-------------------------------------------------------------------------------
    def keyPressEvent(self, event):
        """Keyboard event handler"""
        if event.key() == QtCore.Qt.Key_Q:
            pass
            

#-------------------------------------------------------------------------------
    def _onMountainSpinBoxValueChanged(self, newVal):
        """
        Event handler for the MountainSpinBox valuechange.
        """

        mountain = self._mountain

        try:
            qty = self.deckList._cards[mountain.id].getQty()
        except KeyError:
            qty = 0

        if newVal <= qty:
            for _ in range(0, qty - newVal):
                self.deckList._cards[mountain.id].remove()
                self.statsWidget.removeCardData(mountain)
        else:
            for _ in range(0, newVal - qty):
                self.deckList.addCard(mountain)
                self.statsWidget.addCardData(mountain)

        self.refreshNumbers()
        if self.getSetting('autoUpdateStatsWidget'):
            self.statsWidget.Update()

#-------------------------------------------------------------------------------
    def _onPlainsSpinBoxValueChanged(self, newVal):
        """
        Event handler for the plainsSpinBox valuechange.
        """

        plains = self._plains

        try:
            qty = self.deckList._cards[plains.id].getQty()
        except KeyError:
            qty = 0

        if newVal <= qty:
            for _ in range(0, qty - newVal):
                self.deckList._cards[plains.id].remove()
                self.statsWidget.removeCardData(plains)
        else:
            for _ in range(0, newVal - qty):
                self.deckList.addCard(plains)
                self.statsWidget.addCardData(plains)

        self.refreshNumbers()
        if self.getSetting('autoUpdateStatsWidget'):
            self.statsWidget.Update()

#-------------------------------------------------------------------------------
    def _onIslandSpinBoxValueChanged(self, newVal):
        """
        Event handler for the islandSpinBox valuechange.
        """
        island = self._island

        try:
            qty = self.deckList._cards[island.id].getQty()
        except KeyError:
            qty = 0

        if newVal <= qty:
            for _ in range(0, qty - newVal):
                self.deckList._cards[island.id].remove()
                self.statsWidget.removeCardData(island)
        else:
            for _ in range(0, newVal - qty):
                self.deckList.addCard(island)
                self.statsWidget.addCardData(island)

        self.refreshNumbers()
        if self.getSetting('autoUpdateStatsWidget'):
            self.statsWidget.Update()

#-------------------------------------------------------------------------------
    def _onSwampSpinBoxValueChanged(self, newVal):
        """
        Event handler for the swampSpinBox valuechange.
        """

        swamp = self._swamp

        try:
            qty = self.deckList._cards[swamp.id].getQty()
        except KeyError:
            qty = 0

        if newVal <= qty:
            for _ in range(0, qty - newVal):
                self.deckList._cards[swamp.id].remove()
                self.statsWidget.removeCardData(swamp)
        else:
            for _ in range(0, newVal - qty):
                self.deckList.addCard(swamp)
                self.statsWidget.addCardData(swamp)

        self.refreshNumbers()
        if self.getSetting('autoUpdateStatsWidget'):
            self.statsWidget.Update()

#-------------------------------------------------------------------------------
    def _onForestSpinBoxValueChanged(self, newVal):
        """
        Event handler for the forestSpinBox valuechange.
        """

        forest = self._forest

        try:
            qty = self.deckList._cards[forest.id].getQty()
        except KeyError:
            qty = 0

        if newVal <= qty:
            for _ in range(0, qty - newVal):
                self.deckList._cards[forest.id].remove()
                self.statsWidget.removeCardData(forest)
        else:
            for _ in range(0, newVal - qty):
                self.deckList.addCard(forest)
                self.statsWidget.addCardData(forest)

        self.refreshNumbers()
        if self.getSetting('autoUpdateStatsWidget'):
            self.statsWidget.Update()



#==========================================================================#
#                              QT dialogs                                  #
#==========================================================================#

#-------------------------------------------------------------------------------
    def _saveDeckClosingWarning(self):
        """Warning displayed when trying to close the current unsaved deck."""

        title = "Save deck?"
        msg = "Current deck not saved. Save deck before discarding?"
        return QtWidgets.QMessageBox.question(self, title, msg,
                                              QtWidgets.QMessageBox.Yes,
                                              QtWidgets.QMessageBox.No,
                                              QtWidgets.QMessageBox.Cancel)


#-------------------------------------------------------------------------------
    def _saveCubeQuestionDialog(self):
        """
        A question dialog displayed when the user is opted to save the
        scanned file contents as a cube file.
        """

        title = "Save cube"
        msg = "Save the contents of the file as a .cube file?"
        return QtWidgets.QMessageBox.question(self, title, msg,
                                              QtWidgets.QMessageBox.Ok,
                                              QtWidgets.QMessageBox.Cancel)

#-------------------------------------------------------------------------------
    def _saveCubeDialog(self):
        """A save cube dialog. Returns path where the cube is to be saved."""

        caption = 'Save cube as...'
        fileFilter = '.Cube'
        loc = self.getSetting('lastSaveCubeLoc')

        return QtWidgets.QFileDialog().getSaveFileName(self, caption,
                                                   filter=fileFilter,
                                                   directory=loc)


#-------------------------------------------------------------------------------
    def _saveMWSDeckFileDialog(self):
        """A save mws deck dialog. Returns saved deck path.."""

        caption = 'Save deck as...'
        fileFilter = '.MwDeck'
        loc = self.getSetting('lastSaveDeckLoc')

        return QtWidgets.QFileDialog().getSaveFileName(self, caption,
                                                   filter=fileFilter,
                                                   directory=loc)

#-------------------------------------------------------------------------------
    def _saveOrganizedCubeTxtFile(self):
        """A save organized cube text file dialog. Returns saved file path.."""

        caption = 'Save cube as...'
        fileFilter = '.txt'
        loc = self.getSetting('lastSaveDeckLoc')

        return QtWidgets.QFileDialog().getSaveFileName(self, caption,
                                                   filter=fileFilter,
                                                   directory=loc)


#-------------------------------------------------------------------------------
    def _openMWSDeckDialog(self):
        """A path dialog for opening mws decks."""

        caption = 'Open a MWSDeck file'
        loc = self.getSetting('lastOpenDeckLoc')
        return QtWidgets.QFileDialog.getOpenFileName(parent=None, caption=caption,
                                                 directory=loc)

#-------------------------------------------------------------------------------
    def _openCubeFileDialog(self):
        """A path dialog for opening .cube decks."""

        caption = 'Open a .cube file'
        loc = self.getSetting('lastOpenCubeLoc')
        return QtWidgets.QFileDialog.getOpenFileName(parent=None, caption=caption,
                                                 directory=loc)

#-------------------------------------------------------------------------------
    def _openTxtFileDialog(self):
        """A path dialog for opening .txt decks."""

        caption = 'Open a text file containing a list of cards'
        loc = self.getSetting('lastOpenTxtFileLoc')
        return QtWidgets.QFileDialog.getOpenFileName(parent=None, caption=caption,
                                                 directory=loc)

#-------------------------------------------------------------------------------
    def _MWSfileOpenErrorDialog(self):
        """
        An error dialog displayed when something went wrong with
        opening a mws deck file.
        """

        title = "Error in opening a MWSDeck file"
        msg = "Specified file contains no card data or is corrupted"
        QtWidgets.QMessageBox.warning(self, title, msg)

#-------------------------------------------------------------------------------
    def _txtFileOpenErrorDialog(self):
        """
        An error dialog displayed when something went wrong with
        opening a .txt file.
        """

        title = "Error in opening a text file"
        msg = "Specified file contains no card data or is corrupted"
        QtWidgets.QMessageBox.warning(self, title, msg)

#-------------------------------------------------------------------------------
    def _cubeFileOpenErrorDialog(self):
        """
        An error dialog displayed when something went wrong with
        opening a .cube deck file.
        """

        title = "Error in opening a Cube file"
        msg = "Specified file contains no cube data or is corrupted"
        QtWidgets.QMessageBox.warning(self, title, msg)

#-------------------------------------------------------------------------------
    def _errorsInTxtFileDialog(self, cards):
        """
        An error dialog displayed when errors are found in scanning a txt file
        for cards.
        """

        title = 'Errors in the file'
        msg = "Some lines were rejected possibly because they had spelling errors, comments or other non-card text. You can manually fix these lines in the text file"

        msgBox = QtWidgets.QMessageBox()
        msgBox.setText(title)
        msgBox.setInformativeText(msg)
        msgBox.setStandardButtons(QtWidgets.QMessageBox.Ok)
        msgBox.setDefaultButton(QtWidgets.QMessageBox.Ok)
        msgBox.setDetailedText(cards[1])
        msgBox.exec_()

#==========================================================================#
#                             Generated                                    #
#==========================================================================#
#-------------------------------------------------------------------------------
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1156, 915)
        MainWindow.setMinimumSize(QtCore.QSize(100, 100))
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.basicLandsBox = QtWidgets.QGroupBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.basicLandsBox.sizePolicy().hasHeightForWidth())
        self.basicLandsBox.setSizePolicy(sizePolicy)
        self.basicLandsBox.setMinimumSize(QtCore.QSize(188, 100))
        self.basicLandsBox.setMaximumSize(QtCore.QSize(188, 16777215))
        self.basicLandsBox.setObjectName("basicLandsBox")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.basicLandsBox)
        self.gridLayout_6.setSizeConstraint(QtWidgets.QLayout.SetFixedSize)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.islandSpinBox = QtWidgets.QSpinBox(self.basicLandsBox)
        self.islandSpinBox.setObjectName("islandSpinBox")
        self.gridLayout_6.addWidget(self.islandSpinBox, 3, 1, 1, 1)
        self.plainsLabel = QtWidgets.QLabel(self.basicLandsBox)
        self.plainsLabel.setObjectName("plainsLabel")
        self.gridLayout_6.addWidget(self.plainsLabel, 4, 0, 1, 1)
        self.swampLabel = QtWidgets.QLabel(self.basicLandsBox)
        self.swampLabel.setObjectName("swampLabel")
        self.gridLayout_6.addWidget(self.swampLabel, 0, 0, 1, 1)
        self.mountainLabel = QtWidgets.QLabel(self.basicLandsBox)
        self.mountainLabel.setObjectName("mountainLabel")
        self.gridLayout_6.addWidget(self.mountainLabel, 2, 0, 1, 1)
        self.plainsSpinBox = QtWidgets.QSpinBox(self.basicLandsBox)
        self.plainsSpinBox.setObjectName("plainsSpinBox")
        self.gridLayout_6.addWidget(self.plainsSpinBox, 4, 1, 1, 1)
        self.forestSpinBox = QtWidgets.QSpinBox(self.basicLandsBox)
        self.forestSpinBox.setObjectName("forestSpinBox")
        self.gridLayout_6.addWidget(self.forestSpinBox, 1, 1, 1, 1)
        self.swampSpinBox = QtWidgets.QSpinBox(self.basicLandsBox)
        self.swampSpinBox.setObjectName("swampSpinBox")
        self.gridLayout_6.addWidget(self.swampSpinBox, 0, 1, 1, 1)
        self.islandLabel = QtWidgets.QLabel(self.basicLandsBox)
        self.islandLabel.setObjectName("islandLabel")
        self.gridLayout_6.addWidget(self.islandLabel, 3, 0, 1, 1)
        self.mountainSpinBox = QtWidgets.QSpinBox(self.basicLandsBox)
        self.mountainSpinBox.setObjectName("mountainSpinBox")
        self.gridLayout_6.addWidget(self.mountainSpinBox, 2, 1, 1, 1)
        self.forestLabel_2 = QtWidgets.QLabel(self.basicLandsBox)
        self.forestLabel_2.setObjectName("forestLabel_2")
        self.gridLayout_6.addWidget(self.forestLabel_2, 1, 0, 1, 1)
        self.gridLayout.addWidget(self.basicLandsBox, 4, 2, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(0, 0, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem, 5, 2, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(20, 500, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem1, 6, 2, 1, 1)
        self.sideBoardBox = QtWidgets.QGroupBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sideBoardBox.sizePolicy().hasHeightForWidth())
        self.sideBoardBox.setSizePolicy(sizePolicy)
        self.sideBoardBox.setMinimumSize(QtCore.QSize(200, 300))
        self.sideBoardBox.setObjectName("sideBoardBox")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.sideBoardBox)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.sideBoardList = CardList(self.sideBoardBox, self)
        self.sideBoardList.setObjectName("sideBoardList")
        self.sideBoardList.headerItem().setText(0, "1")
        self.gridLayout_2.addWidget(self.sideBoardList, 0, 1, 1, 1)
        self.gridLayout.addWidget(self.sideBoardBox, 1, 0, 6, 1)
        self.deckBox = QtWidgets.QGroupBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.deckBox.sizePolicy().hasHeightForWidth())
        self.deckBox.setSizePolicy(sizePolicy)
        self.deckBox.setMinimumSize(QtCore.QSize(200, 300))
        self.deckBox.setObjectName("deckBox")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.deckBox)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.deckList = CardList(self.deckBox, self)
        self.deckList.setObjectName("deckList")
        self.deckList.headerItem().setText(0,"1")
        self.gridLayout_3.addWidget(self.deckList, 0, 1, 1, 1)
        self.gridLayout.addWidget(self.deckBox, 1, 1, 6, 1)
        self.statsBox = QtWidgets.QGroupBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.statsBox.sizePolicy().hasHeightForWidth())
        self.statsBox.setSizePolicy(sizePolicy)
        self.statsBox.setMinimumSize(QtCore.QSize(800, 200))
        self.statsBox.setMaximumSize(QtCore.QSize(800, 200))
        self.statsBox.setObjectName("statsBox")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.statsBox)
        self.gridLayout_4.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.gridLayout_4.setContentsMargins(5,5,5,5)
        self.gridLayout_4.setSpacing(0)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.statsWidget = QuickStatsCanvas(self.statsBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.statsWidget.sizePolicy().hasHeightForWidth())
        self.statsWidget.setSizePolicy(sizePolicy)
        self.statsWidget.setObjectName("statsWidget")
        self.gridLayout_4.addWidget(self.statsWidget, 0, 0, 1, 1)
        self.gridLayout.addWidget(self.statsBox, 0, 0, 1, 2)
        self.cardImageBox = QtWidgets.QGroupBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.cardImageBox.sizePolicy().hasHeightForWidth())
        self.cardImageBox.setSizePolicy(sizePolicy)
        self.cardImageBox.setMinimumSize(QtCore.QSize(308, 436))
        self.cardImageBox.setMaximumSize(QtCore.QSize(308, 436))
        self.cardImageBox.setBaseSize(QtCore.QSize(200, 200))
        self.cardImageBox.setObjectName("cardImageBox")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.cardImageBox)
        self.verticalLayout_2.setSpacing(5)
        self.verticalLayout_2.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.verticalLayout_2.setContentsMargins(5, 5,5, 5)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.cardImageWidget = CardImageWidget(self.cardImageBox, self.getSetting('picsFolder'), self.getDatabase().getMtgSetNames())
        self.cardImageWidget.setMaximumSize(QtCore.QSize(1000, 16777215))
        self.cardImageWidget.setObjectName("cardImageWidget")
        self.verticalLayout_2.addWidget(self.cardImageWidget)
        self.label = QtWidgets.QLabel(self.cardImageBox)
        self.label.setText("")
        self.label.setObjectName("label")
        self.verticalLayout_2.addWidget(self.label)
        self.gridLayout.addWidget(self.cardImageBox, 0, 2, 2, 1)
        self.cardInfoBox = QtWidgets.QGroupBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(10)
        sizePolicy.setVerticalStretch(10)
        sizePolicy.setHeightForWidth(self.cardInfoBox.sizePolicy().hasHeightForWidth())
        self.cardInfoBox.setSizePolicy(sizePolicy)
        self.cardInfoBox.setMinimumSize(QtCore.QSize(218, 200))
        self.cardInfoBox.setMaximumSize(QtCore.QSize(208, 16777215))
        self.cardInfoBox.setObjectName("cardInfoBox")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.cardInfoBox)
        self.gridLayout_5.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.gridLayout_5.setSpacing(0)
        self.gridLayout_5.setContentsMargins(0, 0, -1, 0)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.landButton = FilterButton(self.cardInfoBox, self, 'Land', self.sideBoardList, self.deckList)
        self.landButton.setObjectName("landButton")
        self.gridLayout_5.addWidget(self.landButton, 6, 1, 1, 1)
        self.blackButton = FilterButton(self.cardInfoBox, self, 'B', self.sideBoardList, self.deckList)
        self.blackButton.setObjectName("blackButton")
        self.gridLayout_5.addWidget(self.blackButton, 2, 0, 1, 1)
        self.greenButton = FilterButton(self.cardInfoBox, self, 'G', self.sideBoardList, self.deckList)
        self.greenButton.setObjectName("greenButton")
        self.gridLayout_5.addWidget(self.greenButton, 2, 1, 1, 1)
        self.blueButton = FilterButton(self.cardInfoBox, self, 'U', self.sideBoardList, self.deckList)
        self.blueButton.setObjectName("blueButton")
        self.gridLayout_5.addWidget(self.blueButton, 3, 0, 1, 1)
        self.redButton = FilterButton(self.cardInfoBox, self, 'R', self.sideBoardList, self.deckList)
        self.redButton.setObjectName("redButton")
        self.gridLayout_5.addWidget(self.redButton, 2, 2, 1, 1)
        self.multicolorButton = MultiColorFilterButton(self.cardInfoBox, self, self.sideBoardList, self.deckList)
        self.multicolorButton.setObjectName("multicolorButton")
        self.gridLayout_5.addWidget(self.multicolorButton, 3, 2, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.gridLayout_5.addItem(spacerItem2, 5, 1, 1, 1)
        self.whiteButton = FilterButton(self.cardInfoBox, self, 'W', self.sideBoardList, self.deckList)
        self.whiteButton.setObjectName("whiteButton")
        self.gridLayout_5.addWidget(self.whiteButton, 3, 1, 1, 1)
        self.resetFiltersButton = FilterButton(self.cardInfoBox, self, 'reset', self.sideBoardList, self.deckList)
        self.resetFiltersButton.setAutoDefault(False)
        self.resetFiltersButton.setDefault(False)
        self.resetFiltersButton.setCheckable(False)
        self.resetFiltersButton.setFlat(False)
        self.resetFiltersButton.setObjectName("resetFiltersButton")
        self.gridLayout_5.addWidget(self.resetFiltersButton, 11, 0, 1, 3)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setContentsMargins(6, -1, 0, -1)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.sideaboardRadioButton = QtWidgets.QRadioButton(self.cardInfoBox)
        self.sideaboardRadioButton.setChecked(True)
        self.sideaboardRadioButton.setObjectName("sideaboardRadioButton")
        self.horizontalLayout.addWidget(self.sideaboardRadioButton)
        self.deckRadioButton = QtWidgets.QRadioButton(self.cardInfoBox)
        self.deckRadioButton.setObjectName("deckRadioButton")
        self.horizontalLayout.addWidget(self.deckRadioButton)
        self.bothRadioButton = QtWidgets.QRadioButton(self.cardInfoBox)
        self.bothRadioButton.setObjectName("bothRadioButton")
        self.horizontalLayout.addWidget(self.bothRadioButton)
        self.gridLayout_5.addLayout(self.horizontalLayout, 0, 0, 1, 3)
        self.creatureButton = FilterButton(self.cardInfoBox, self, 'Creature', self.sideBoardList, self.deckList)
        self.creatureButton.setCheckable(True)
        self.creatureButton.setObjectName("creatureButton")
        self.gridLayout_5.addWidget(self.creatureButton, 6, 2, 1, 1)
        spacerItem3 = QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.gridLayout_5.addItem(spacerItem3, 8, 1, 1, 1)
        self.artifactButton = FilterButton(self.cardInfoBox, self, 'Artifact', self.sideBoardList, self.deckList)
        self.artifactButton.setCheckable(True)
        self.artifactButton.setObjectName("artifactButton")
        self.gridLayout_5.addWidget(self.artifactButton, 6, 0, 1, 1)
        self.nonCreatureButton = FilterButton(self.cardInfoBox, self, 'Non-Creature', self.sideBoardList, self.deckList)
        self.nonCreatureButton.setCheckable(True)
        self.nonCreatureButton.setObjectName("nonCreatureButton")
        self.gridLayout_5.addWidget(self.nonCreatureButton, 7, 0, 1, 3)
        self.gridLayout.addWidget(self.cardInfoBox, 3, 2, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = MainWindowMenuBar(MainWindow, self)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1156, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.toolBar = MainWindowToolBar(MainWindow, self)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        style = 'QGroupBox {font-size: 14px; font-weight: bold}'
        self.sideBoardBox.setStyleSheet(style)
        self.deckBox.setStyleSheet(style)
        self.forestSpinBox.valueChanged.connect(self._onForestSpinBoxValueChanged)
        self.mountainSpinBox.valueChanged.connect(self._onMountainSpinBoxValueChanged)
        self.islandSpinBox.valueChanged.connect(self._onIslandSpinBoxValueChanged)
        self.swampSpinBox.valueChanged.connect(self._onSwampSpinBoxValueChanged)
        self.plainsSpinBox.valueChanged.connect(self._onPlainsSpinBoxValueChanged)

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle("MainWindow")
        self.basicLandsBox.setTitle("Basic Lands(0)")
        self.plainsLabel.setText("Plains")
        self.swampLabel.setText("Swamp")
        self.mountainLabel.setText("Mountain")
        self.islandLabel.setText("Island")
        self.forestLabel_2.setText("Forest")
        self.sideBoardBox.setTitle("Sideboard(0)")
        self.deckBox.setTitle("Deck(0)")
        self.statsBox.setTitle("Quick deck statistics")
        self.cardImageBox.setTitle("Card Image")
        self.cardInfoBox.setTitle("Filters")
        self.landButton.setText("Land")
        self.blackButton.setText("Black")
        self.greenButton.setText("Green")
        self.blueButton.setText("Blue")
        self.redButton.setText("Red")
        self.multicolorButton.setText("Multicolor")
        self.whiteButton.setText("White")
        self.resetFiltersButton.setText("Reset filters")
        self.sideaboardRadioButton.setText("Sideboard")
        self.deckRadioButton.setText("Deck")
        self.bothRadioButton.setText("Both")
        self.creatureButton.setText("Creature")
        self.artifactButton.setText("Artifact")
        self.nonCreatureButton.setText("Other Non-Creature Spells")
        self.toolBar.setWindowTitle("toolBar")
